id,directory,filepath,function_name,description,input_parameters,returns
1,core,`myR/R/core/data_preparation.R`,`.get_feature_vector`,Internal helper to extract a feature (gene or metadata column) from a Seurat object.,"`object`: Seurat object, `feature`: Feature name (gene or metadata column), `assay`: Assay to use (default: DefaultAssay), `slot`: Slot to use (default: ""data""), `cells`: Subset of cells to extract (default: all cells)",Numeric vector of feature values
2,core,`myR/R/core/data_preparation.R`,`get_feature_vec`,Extracts a feature (gene or metadata column) from a Seurat object.,"`object`: Seurat object, `feature`: Feature name (gene or metadata column), `assay`: Assay to use (default: DefaultAssay), `slot`: Slot to use (default: ""data""), `cells`: Subset of cells to extract (default: all cells)",Numeric vector of feature values
3,core,`myR/R/core/data_preparation.R`,`get_feature_matrix`,Extracts multiple features from a Seurat object and returns as a matrix.,"`object`: Seurat object, `features`: Character vector of feature names, `assay`: Assay to use (default: DefaultAssay), `slot`: Slot to use (default: ""data""), `cells`: Subset of cells to extract (default: all cells)",Matrix with features as rows and cells as columns
4,core,`myR/R/core/data_preparation.R`,`prepare_metadata_table`,Extracts and optionally filters metadata from a Seurat object.,"`object`: Seurat object, `columns`: Specific columns to extract (NULL = all columns), `cells`: Subset of cells (NULL = all cells), `drop_na`: Whether to drop rows with NA values (default: FALSE)",Data frame of metadata
5,core,`myR/R/core/data_preparation.R`,`aggregate_expression_by_group`,"Aggregates gene expression across cells within groups (e.g., clusters, samples).","`object`: Seurat object, `features`: Features (genes) to aggregate, `group_by`: Metadata column to group by, `method`: Aggregation method: ""mean"", ""median"", ""sum"" (default: ""mean""), `assay`: Assay to use (default: DefaultAssay), `slot`: Slot to use (default: ""data"")",Matrix with features as rows and groups as columns
6,core,`myR/R/core/data_preparation.R`,`prepare_count_matrix`,Extracts a count matrix from a Seurat object with optional filtering.,"`object`: Seurat object, `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts""), `features`: Features to include (NULL = all), `cells`: Cells to include (NULL = all), `min_cells`: Minimum number of cells expressing a feature (default: 0), `min_features`: Minimum number of features expressed in a cell (default: 0)",Sparse or dense matrix of counts
7,core,`myR/R/core/data_preparation.R`,`convert_to_long_format`,Converts expression data to long (tidy) format for ggplot2.,"`object`: Seurat object, `features`: Features to include, `metadata_cols`: Metadata columns to include, `assay`: Assay to use (default: DefaultAssay), `slot`: Slot to use (default: ""data""), `cells`: Cells to include (NULL = all)","Data frame in long format with columns: cell, feature, expression, and metadata"
8,core,`myR/R/core/data_preparation.R`,`check_data_quality`,Performs basic quality checks on expression data.,"`data`: Matrix or data frame of expression data, `check_finite`: Check for infinite values (default: TRUE), `check_na`: Check for NA values (default: TRUE), `check_negative`: Check for negative values (default: TRUE)",List with logical flags and counts of issues found
9,core,`myR/R/core/validation.R`,`validate_seurat`,Checks if the input is a valid Seurat object with expected components.,"`obj`: Object to validate, `assay`: Optional assay name to check for, `reduction`: Optional reduction name to check for, `min_cells`: Minimum number of cells required, `min_features`: Minimum number of features required","TRUE if valid, stops with error message otherwise"
10,core,`myR/R/core/validation.R`,`validate_metadata_column`,Checks if a metadata column exists and optionally validates its type.,"`obj`: Seurat object or data frame, `column_name`: Column name to validate, `required_type`: Optional required type (""numeric"", ""factor"", ""character""), `allow_na`: Whether NA values are allowed","TRUE if valid, stops with error message otherwise"
11,core,`myR/R/core/validation.R`,`validate_genes`,Checks if genes exist in the object and optionally filters to valid genes.,"`obj`: Seurat object or character vector of available genes, `genes`: Character vector of genes to validate, `min_present`: Minimum number of genes that must be present (default: all), `assay`: Assay to check genes in (for Seurat objects), `warn_missing`: Whether to warn about missing genes",Character vector of valid genes present in the object
12,core,`myR/R/core/validation.R`,`validate_numeric_range`,Checks if a numeric parameter is within acceptable range.,"`value`: Numeric value to validate, `param_name`: Name of parameter (for error messages), `min`: Minimum allowed value (inclusive), `max`: Maximum allowed value (inclusive), `allow_na`: Whether NA is allowed","TRUE if valid, stops with error message otherwise"
13,core,`myR/R/core/validation.R`,`validate_choice`,Validates that a value is one of allowed choices (like match.arg but more informative).,"`value`: Value to validate, `param_name`: Name of parameter (for error messages), `choices`: Vector of allowed values, `multiple`: Whether multiple choices are allowed",The validated value (or values if multiple=TRUE)
14,core,`myR/R/core/validation.R`,`validate_path`,Checks if a file path exists and optionally validates extension.,"`path`: File path to validate, `must_exist`: Whether file must already exist, `extensions`: Optional vector of allowed extensions (e.g., c(""csv"", ""txt"")), `type`: Type of path (""file"" or ""directory"")","Normalized path if valid, stops with error otherwise"
15,core,`myR/R/core/validation.R`,`create_error_message`,"Helper to create consistent, informative error messages.","`context`: Context where error occurred (e.g., function name), `message`: Main error message, `suggestion`: Optional suggestion for fixing the error",Formatted error message
16,core,`myR/R/core/validation.R`,`check_packages`,Checks if required packages are installed and optionally loads them.,"`packages`: Character vector of package names, `load`: Whether to load the packages (default: FALSE)","TRUE if all packages available, stops with error otherwise"
17,analysis,`myR/R/analysis/cell_communication/nichenet_analysis.R`,`ligand_to_target`,Retrieves ligand-target gene regulatory potential from NicheNet databases.,"`ligand`: Character vector of ligand genes, `target`: Character vector of target genes, `lr_network`: Ligand-receptor network (from NicheNet), `sig_network`: Signaling network (from NicheNet), `gr_network`: Gene regulatory network (from NicheNet), `top_n_targets`: Number of top targets to return per ligand (default: 250)",Data frame with ligand-target regulatory potential scores
18,analysis,`myR/R/analysis/cell_communication/nichenet_analysis.R`,`run_nichenet_analysis`,"Performs a comprehensive NicheNet cell-cell communication analysis workflow, including ligand activity prediction, receptor inference, and visualization.","`seurat_obj`: Seurat object, `sender_cells`: Vector of sender cell identities or logical vector, `receiver_cells`: Vector of receiver cell identities or logical vector, `condition_oi`: Condition of interest for receiver DE analysis, `condition_ref`: Reference condition for receiver DE analysis, `ident_col`: Identity column in metadata (default: ""seurat_clusters""), `condition_col`: Condition column in metadata (required for DE), `lr_network`: Ligand-receptor network (from NicheNet), `sig_network`: Signaling network (from NicheNet), `gr_network`: Gene regulatory network (from NicheNet), `ligand_target_matrix`: Pre-computed ligand-target matrix (optional), `expressed_pct`: Expression percentage threshold (default: 0.10), `top_n_ligands`: Number of top ligands to analyze (default: 20), `top_n_targets`: Number of top targets per ligand (default: 200), `plot_circos`: Generate Circos plot (default: FALSE), `output_dir`: Directory for saving plots (default: NULL)","List containing: ligand_activities, best_ligands, ligand_target_links, ligand_receptor_links, plots, warnings"
19,analysis,`myR/R/analysis/cell_communication/nichenet_analysis.R`,`prepare_nichenet_circos_data`,Prepares ligand-receptor and ligand-target data for Circos visualization.,"`ligand_receptor_links`: Data frame with ligand-receptor pairs, `ligand_target_links`: Data frame with ligand-target regulatory links, `ligand_activities`: Data frame with ligand activity scores, `top_n_ligands`: Number of top ligands to include (default: 10), `top_n_targets`: Number of top targets per ligand (default: 20)",List with formatted data for Circos plot
20,analysis,`myR/R/analysis/cell_communication/nichenet_analysis.R`,`draw_nichenet_circos_plot`,Creates a Circos plot showing ligand-receptor and ligand-target interactions.,"`circos_data`: List from prepare_nichenet_circos_data, `ligand_color`: Color for ligands (default: ""#E41A1C""), `receptor_color`: Color for receptors (default: ""#377EB8""), `target_color`: Color for targets (default: ""#4DAF4A"")",NULL (plot is drawn to current device)
21,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`prepare_pseudobulk_edgeR`,Aggregates single-cell counts to pseudo-bulk level for differential expression analysis.,"`object`: Seurat object, `sample_col`: Metadata column identifying samples/replicates, `group_col`: Metadata column for grouping (e.g., condition, treatment), `cluster_col`: Optional cluster column for per-cluster analysis (default: NULL), `target_cluster`: If cluster_col is specified, analyze only this cluster (default: NULL), `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts""), `min_cells`: Minimum cells per sample to include (default: 10), `min_counts`: Minimum total counts per gene (default: 10)","List containing counts, metadata, and cluster info"
22,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`run_pseudobulk_deg`,Performs edgeR-based pseudo-bulk differential gene expression analysis.,"`object`: Seurat object or prepared pseudobulk list, `sample_col`: Sample identifier column, `group_col`: Group comparison column, `comparison`: Two-element vector for comparison (e.g., c(""Treatment"", ""Control"")), `cluster_col`: Optional cluster column, `target_cluster`: Specific cluster to analyze, `mode`: Analysis mode: ""overall"", ""per_cluster"", ""specific_cluster"", `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts""), `min_cells`: Minimum cells per sample (default: 10), `min_counts`: Minimum total counts per gene (default: 10), `fdr_threshold`: FDR threshold (default: 0.05), `logfc_threshold`: Log fold change threshold (default: 0)",Data frame with DE results or list of data frames if per_cluster
23,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`.run_edger_analysis`,Internal edgeR Analysis.,"`counts`: counts, `metadata`: metadata, `group_col`: group_col, `comparison`: comparison, `fdr_threshold`: fdr_threshold, `logfc_threshold`: logfc_threshold",Data frame with DE results
24,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`linear_seurat`,"Performs linear regression analysis for gene expression against a regressor with support for continuous, categorical, and ordinal predictors.","`sobj`: Seurat object, `layer`: Expression layer: ""counts"", ""data"", ""scale.data"", `features`: Features to test (default: ""all""), `regressor`: Regressor variable name in metadata, `regressor.type`: Type: ""continuous"", ""categorical"", ""ordinal"", `reference.level`: Reference level for categorical, `ordinal.method`: Method for ordinal: ""linear"", ""polynomial"", ""spline"", `link.function`: Link function: ""linear"", ""poisson"", ""negative.binomial"", `effect`: Effect type: ""fixed"", ""random"", `covariates`: Covariate column names, `min.cells`: Minimum cells expressing gene (default: 10), `return.full`: Return full results including Seurat object",Data frame with regression results
25,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`create_analysis_config`,"Creates a configuration object to manage metadata column names consistently throughout complex experimental designs (e.g., GeoMx with patient, drug, timepoint).","`patient`: Column name for patient ID, `drug`: Column name for drug/treatment, `timepoint`: Column name for timepoint (e.g., pre/post), `ck`: Column name for stratification variable (e.g., CK status), `response`: Column name for treatment response, `aoi`: Column name for AOI (Area of Interest) ID",Named list containing column names
26,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`fit_lmm_single_gene`,Internal helper to fit an lmer model for one gene with complex experimental design.,"`gene_expr`: Numeric vector of expression values, `metadata`: Metadata data frame, `config`: Analysis configuration from create_analysis_config(), `formula_str`: Optional custom formula string, `formula_components`: List with fixed, interactions, and random components, `use_config_names`: Whether to map generic names to config names","List with model, effects, anova, convergence status"
27,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`summarize_lmm_results`,Internal helper to combine results from multiple LMMs and calculate adjusted p-values.,"`lmm_results`: List of results from fit_lmm_single_gene, `config`: Analysis configuration",Tidy data frame summarizing all model effects
28,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`run_lmm_multiple_genes`,"Applies LMM to multiple genes in parallel. Main workhorse for LMM analysis with complex experimental designs (e.g., patient, drug, timepoint, response).","`seurat_obj`: Seurat object, `genes`: Character vector of gene names to analyze, `config`: Analysis configuration from create_analysis_config(), `formula_str`: Optional custom formula string, `formula_components`: List specifying model formula components, `use_config_names`: Whether to use config names in formula, `n_cores`: Number of CPU cores for parallel processing, `verbose`: Whether to print progress messages","List containing: raw_results, summary, converged_genes, total_genes"
29,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`find_response_differential_genes`,Identifies genes where treatment response differs by drug from LMM results.,"`lmm_summary`: Summary data frame from run_lmm_multiple_genes, `config`: Analysis configuration, `drug_name`: Optional specific drug name to focus on, `top_n`: Number of top genes to return",Data frame of top genes ranked by effect size
30,analysis,`myR/R/analysis/differential_expression/differential_expression.R`,`find_drug_specific_genes`,Identifies genes most strongly associated with specific drugs.,"`lmm_summary`: Summary data frame from run_lmm_multiple_genes, `config`: Analysis configuration, `top_n`: Number of top genes to return",Data frame of top genes ranked by effect size
31,analysis,`myR/R/analysis/markers/marker_processing.R`,`marker_trim`,Filters marker gene results based on log fold change direction and adjusted p-value threshold.,"`markers`: Data frame from FindMarkers/FindAllMarkers, `direction`: Filter direction: ""up"" (positive logFC), ""down"" (negative logFC), or ""both"" (default: ""both""), `padj_threshold`: Adjusted p-value threshold (default: 0.05), `logfc_col`: Name of log fold change column (default: ""avg_log2FC""), `padj_col`: Name of adjusted p-value column (default: ""p_val_adj"")",Filtered data frame
32,analysis,`myR/R/analysis/markers/marker_processing.R`,`marker_filter`,"Removes ribosomal, mitochondrial, hemoglobin, and other unwanted genes from marker results.","`markers`: Data frame from FindMarkers/FindAllMarkers, `remove_ribo`: Remove ribosomal genes (^RP[SL]) (default: TRUE), `remove_mito`: Remove mitochondrial genes (^MT-) (default: TRUE), `remove_hb`: Remove hemoglobin genes (^HB[AB]) (default: TRUE), `remove_ig`: Remove immunoglobulin genes (^IG[HKL]) (default: FALSE), `remove_tr`: Remove T-cell receptor genes (^TR[ABGD]) (default: FALSE), `custom_patterns`: Additional regex patterns to remove (default: NULL), `gene_col`: Name of gene column (default: ""gene"" or rownames if not present)",Filtered data frame
33,analysis,`myR/R/analysis/markers/marker_processing.R`,`lrf`,"Filters out ""(Intercept)"" terms from linear mixed model results.","`results`: Data frame with model results, `term_col`: Name of column containing term names (default: ""term"")",Filtered data frame
34,analysis,`myR/R/analysis/markers/marker_processing.R`,`all_markers_to_list`,"Converts FindAllMarkers output to a named list, with one element per cluster.","`all_markers`: Data frame from FindAllMarkers, `cluster_col`: Name of cluster column (default: ""cluster""), `gene_col`: Name of gene column (default: ""gene"" or rownames)","Named list of marker data frames, one per cluster"
35,analysis,`myR/R/analysis/markers/marker_processing.R`,`marker_print_all`,Prints top N marker genes for each cluster from FindAllMarkers output.,"`all_markers`: Data frame from FindAllMarkers, `n`: Number of top markers to print per cluster (default: 10), `order_by`: Column to order by (default: ""avg_log2FC""), `decreasing`: Sort in decreasing order (default: TRUE), `cluster_col`: Name of cluster column (default: ""cluster""), `gene_col`: Name of gene column (default: ""gene"" or rownames)",Invisibly returns the input data frame
36,analysis,`myR/R/analysis/markers/marker_processing.R`,`marker_print`,Prints top N marker genes from a single marker data frame.,"`markers`: Data frame from FindMarkers, `n`: Number of top markers to print (default: 10), `order_by`: Column to order by (default: ""avg_log2FC""), `decreasing`: Sort in decreasing order (default: TRUE), `gene_col`: Name of gene column (default: ""gene"" or rownames), `columns`: Columns to display (default: c(""avg_log2FC"", ""p_val_adj""))",Invisibly returns the input data frame
37,analysis,`myR/R/analysis/markers/marker_processing.R`,`synthesize_markers`,Combines p-values and log fold changes from multiple FindMarkers results using Fisher's method for p-values and weighted mean for log fold changes.,"`marker_list`: Named list of marker data frames, `gene_col`: Name of gene column (default: ""gene"" or rownames), `logfc_col`: Name of log fold change column (default: ""avg_log2FC""), `pval_col`: Name of p-value column (default: ""p_val""), `weights`: Optional weights for each dataset (default: equal weights)",Data frame with synthesized results
38,analysis,`myR/R/analysis/markers/marker_processing.R`,`synthesize_ranks`,Combines ranks from multiple FindMarkers results using geometric mean of ranks.,"`marker_list`: Named list of marker data frames, `gene_col`: Name of gene column (default: ""gene"" or rownames), `rank_by`: Column to rank by (default: ""avg_log2FC""), `decreasing`: Rank in decreasing order (default: TRUE)",Data frame with synthesized ranks
39,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`convert_gene_ids`,"Converts gene identifiers between different formats (e.g., SYMBOL, ENTREZID, ENSEMBL).","`genes`: Character vector of gene identifiers, `from`: Source ID type (default: ""SYMBOL""), `to`: Target ID type (default: ""ENTREZID""), `org_db`: Organism database (default: org.Hs.eg.db for human), `remove_na`: Remove genes that couldn't be converted (default: TRUE)",Named character vector of converted IDs (names are original IDs)
40,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`prepare_gene_lists`,Prepares gene lists from differential expression results for pathway analysis.,"`deg_results`: Data frame with DE results (must contain logFC and p-value columns), `gene_col`: Name of gene column (default: ""gene"" or rownames), `logfc_col`: Name of log fold change column (default: ""logFC"" or ""avg_log2FC""), `pval_col`: Name of p-value column (default: ""pvalue"" or ""p_val""), `padj_col`: Name of adjusted p-value column (default: ""padj"" or ""p_val_adj""), `padj_threshold`: Adjusted p-value threshold (default: 0.05), `logfc_threshold`: Log fold change threshold (default: 0), `convert_ids`: Convert gene IDs to ENTREZID (default: TRUE)","List containing: ranked_genes, up_genes, down_genes, sig_genes, background_genes"
41,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`get_pathway_sets`,Returns available pathway database identifiers for GSEA.,"`species`: Species code (default: ""Homo sapiens""), `category`: MSigDB category (e.g., ""H"", ""C2"", ""C5""), `subcategory`: MSigDB subcategory (e.g., ""CP:KEGG"", ""GO:BP"")",Character vector of available gene set names
42,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`run_go_analysis`,Performs Gene Ontology (GO) enrichment analysis using clusterProfiler.,"`genes`: Character vector of gene IDs (ENTREZID format), `universe`: Background gene universe (optional), `ont`: GO ontology: ""BP"", ""MF"", ""CC"", or ""ALL"" (default: ""BP""), `pval_cutoff`: P-value cutoff (default: 0.05), `qval_cutoff`: Q-value cutoff (default: 0.05), `org_db`: Organism database (default: org.Hs.eg.db)",enrichResult object from clusterProfiler
43,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`run_kegg_analysis`,Performs KEGG pathway enrichment analysis using clusterProfiler.,"`genes`: Character vector of gene IDs (ENTREZID format), `universe`: Background gene universe (optional), `organism`: KEGG organism code (default: ""hsa"" for human), `pval_cutoff`: P-value cutoff (default: 0.05), `qval_cutoff`: Q-value cutoff (default: 0.05)",enrichResult object from clusterProfiler
44,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`run_gsea_analysis`,Performs GSEA using fgsea with MSigDB gene sets.,"`ranked_genes`: Named numeric vector of genes ranked by score (e.g., logFC), `species`: Species for MSigDB (default: ""Homo sapiens""), `category`: MSigDB category (default: ""H"" for Hallmark), `subcategory`: MSigDB subcategory (optional), `min_size`: Minimum gene set size (default: 15), `max_size`: Maximum gene set size (default: 500), `nperm`: Number of permutations (default: 10000)",Data frame with GSEA results
45,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`format_results`,Standardizes output from different pathway analysis methods.,"`results`: Results object from GO, KEGG, or GSEA analysis, `method`: Method used: ""GO"", ""KEGG"", or ""GSEA""",Standardized data frame
46,analysis,`myR/R/analysis/pathway/pathway_enrichment.R`,`myGO`,"Runs GO, KEGG, and GSEA analyses and returns combined results.","`deg_results`: Data frame with differential expression results, `run_go`: Perform GO analysis (default: TRUE), `run_kegg`: Perform KEGG analysis (default: TRUE), `run_gsea`: Perform GSEA (default: TRUE), `go_ont`: GO ontology (default: ""BP""), `gsea_category`: MSigDB category for GSEA (default: ""H""), `padj_threshold`: Adjusted p-value threshold for gene selection (default: 0.05), `logfc_threshold`: Log fold change threshold (default: 0)",List containing results from each analysis method
47,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`prepare_geomx_data`,Prepares raw GeoMx count data for analysis by organizing into a standard format.,"`counts`: Count matrix (genes x ROIs), `metadata`: Data frame with ROI-level metadata, `feature_info`: Optional data frame with gene/probe information","List containing: counts, metadata, features"
48,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`q3_normalize`,Performs Q3 (third quartile) normalization on GeoMx count data.,"`geomx_data`: List from prepare_geomx_data or count matrix, `scale_factor`: Scaling factor after normalization (default: 1000)",Normalized data in same format as input
49,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`perform_qc`,Performs basic QC checks and filtering on GeoMx data.,"`geomx_data`: List from prepare_geomx_data, `min_counts`: Minimum total counts per ROI (default: 1000), `min_genes`: Minimum number of detected genes per ROI (default: 100), `min_rois`: Minimum number of ROIs expressing a gene (default: 2)",Filtered GeoMx data list with QC metrics added to metadata
50,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`find_deg_geomx`,Performs differential expression analysis on GeoMx data using limma or Wilcoxon test.,"`geomx_data`: List from prepare_geomx_data (normalized), `group_col`: Metadata column for grouping, `comparison`: Comparison to make (e.g., c(""Treatment"", ""Control"")), `method`: Method to use: ""limma"" or ""wilcox"" (default: ""limma""), `covariates`: Optional covariate columns to include in limma model, `log_transform`: Apply log2(x+1) transformation (default: TRUE for limma)",Data frame with differential expression results
51,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`.geomx_limma`,Internal limma Analysis.,"`expr_data`: Expression data, `metadata`: Metadata, `group_col`: Group column, `comparison`: Comparison, `covariates`: Covariates",Data frame with limma results
52,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`.geomx_wilcox`,Internal Wilcoxon Test.,"`expr_data`: Expression data, `metadata`: Metadata, `group_col`: Group column, `comparison`: Comparison",Data frame with Wilcoxon results
53,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`plot_deg_volcano`,Creates a volcano plot from differential expression results.,"`deg_results`: Data frame from find_deg_geomx, `padj_threshold`: Adjusted p-value threshold (default: 0.05), `logfc_threshold`: Log fold change threshold (default: 1), `label_top`: Number of top genes to label (default: 10), `title`: Plot title",ggplot object
54,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`plot_deg_heatmap`,Creates a heatmap of top differentially expressed genes.,"`geomx_data`: GeoMx data list (normalized), `deg_results`: Data frame from find_deg_geomx, `group_col`: Metadata column for grouping, `n_genes`: Number of top genes to plot (default: 50), `scale_rows`: Z-score scale rows (default: TRUE)",Heatmap (ComplexHeatmap or pheatmap object)
55,analysis,`myR/R/analysis/spatial/geomx_analysis.R`,`run_geomx_analysis`,Wrapper function to run the complete GeoMx analysis workflow.,"`raw_data`: Raw data matrix., `metadata_SP`: Metadata data frame., `group_var`: Column for differential expression., `group1`: First group for comparison., `group2`: Second group for comparison (optional)., `qc_filter`: Perform QC filtering (default: TRUE)., `min_genes`: Minimum number of detected genes per ROI (default: 100)., `min_counts`: Minimum total counts per ROI (default: 1000).","List containing processed data, DEG results, and plots."
56,analysis,`myR/R/analysis/trajectory/trajectory_inference.R`,`run_slingshot_from_seurat`,Runs Slingshot trajectory inference from a Seurat object and returns a SingleCellExperiment object with computed trajectories.,"`seurat_obj`: Seurat object, `cluster_col`: Cluster column in metadata (default: ""seurat_clusters""), `reduction`: Dimensionality reduction to use (default: ""umap""), `start_cluster`: Starting cluster for trajectory (optional), `end_cluster`: Ending cluster(s) for trajectory (optional), `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts"")",SingleCellExperiment object with Slingshot results
57,analysis,`myR/R/analysis/trajectory/trajectory_inference.R`,`analyze_gene_dynamics`,"Fits a Generalized Additive Model (GAM) to model gene expression changes along pseudotime, accounting for conditions.","`sce`: SingleCellExperiment object from run_slingshot_from_seurat, `gene`: Gene name to analyze, `condition`: Optional condition variable for comparison, `lineage`: Lineage number to analyze (default: 1), `plot`: Create plots (default: TRUE), `output_dir`: Directory for saving plots (optional)","List containing: model, summary, plot"
58,analysis,`myR/R/analysis/trajectory/trajectory_inference.R`,`process_gene_list_dynamics`,"Processes a list of genes using analyze_gene_dynamics, with optional parallel processing.","`sce`: SingleCellExperiment object, `genes`: Character vector of gene names, `condition`: Optional condition variable, `lineage`: Lineage number (default: 1), `plot`: Create plots (default: FALSE), `output_dir`: Directory for saving results, `n_cores`: Number of cores for parallel processing (default: 1)",List of results for each gene
59,analysis,`myR/R/analysis/trajectory/trajectory_inference.R`,`analyze_gene_dynamics_tradeSeq`,Fits GAMs using tradeSeq for differential expression patterns along trajectories.,"`sce`: SingleCellExperiment object from Slingshot, `gene`: Gene name to analyze, `n_knots`: Number of knots for spline (default: 6), `conditions`: Optional condition variable",List with test results
60,signatures,`myR/R/signatures/signature_discovery.R`,`find_gene_signature`,"Discovers gene signatures using multiple methods including Random Forest, LASSO, limma, NMF, Wilcoxon, GAM, and PCA.","`data`: Seurat object, count matrix, or data.frame, `meta.data`: Optional metadata data.frame (required if data is not Seurat), `target_var`: Column name in metadata representing the target variable, `target_group`: For numeric: quantile cutoff or list(low, high). For factor: levels to compare, `method`: One of: ""tree_based"", ""lasso"", ""limma"", ""nmf"", ""wilcoxon"", ""gam"", ""pca_loadings"", `n_features`: Number of top features to return (default: 50), `preprocess`: Whether to normalize/scale data (default: TRUE), `min_cells`: Minimum cells expressing gene (default: 10), `min_pct`: Minimum percentage of cells expressing gene (default: 0.01), `return_model`: Return full model object (default: FALSE), `seed`: Random seed for reproducibility (default: 42), `...`: Additional method-specific parameters","List containing: genes, weights, scores, performance, method, model"
61,signatures,`myR/R/signatures/signature_discovery.R`,`print.gene_signature`,Print Method for gene_signature Objects.,"`x`: gene_signature object, `...`: Additional arguments (unused)",None (prints to console)
62,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_rf`,Internal helper for Random Forest signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups, `return_model`: Whether to return the model",List of signature results
63,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_lasso`,Internal helper for LASSO signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups, `return_model`: Whether to return the model",List of signature results
64,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_limma`,Internal helper for limma signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups, `return_model`: Whether to return the model",List of signature results
65,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_wilcoxon`,Internal helper for Wilcoxon signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups",List of signature results
66,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_nmf`,Internal helper for NMF signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups, `return_model`: Whether to return the model",List of signature results
67,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_gam`,Internal helper for GAM signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups",List of signature results
68,signatures,`myR/R/signatures/signature_discovery.R`,`.find_signature_pca`,Internal helper for PCA loadings signature discovery.,"`expr_mat`: Expression matrix, `target_binary`: Binary target vector, `n_features`: Number of features to return, `n_groups`: Number of groups, `return_model`: Whether to return the model",List of signature results
69,signatures,`myR/R/signatures/signature_scoring.R`,`AddMultipleModuleScores`,"Calculates module scores for multiple gene sets using Seurat's AddModuleScore. Automatically handles naming and removes the default ""1"" suffix.","`seurat_object`: A Seurat object, `feature_sets`: Named or unnamed list of character vectors (gene sets), `assay`: Name of the assay to use (default: DefaultAssay), `slot`: Slot to pull expression data from (default: ""data""), `nbin`: Number of bins for AddModuleScore (default: 24), `ctrl`: Number of control features (default: 100), `seed`: Random seed (default: 1), `search`: Passed to Seurat::[.Assay (default: FALSE), `...`: Additional arguments passed to Seurat::AddModuleScore",Seurat object with added module scores in metadata
70,signatures,`myR/R/signatures/signature_scoring.R`,`add_signature_enrichit`,Calculates a gene signature score using escape::enrichIt and adds it to the Seurat object's metadata. Flexibly accepts different gene ID types.,"`seurat_obj`: A Seurat object, `gene_source`: File path, data.frame, or vector containing gene IDs, `signature_name`: Name for the new metadata column, `input_keytype`: Type of input gene IDs (default: ""ENSEMBL""), `gene_col`: Column index/name if gene_source is file or data.frame (default: 1), `sheet_name`: Sheet name/index if xlsx file (default: 1), `assay`: Assay to use (default: ""RNA""), `layer`: Layer (slot) to use (default: ""data""), `...`: Additional arguments passed to escape::enrichIt",Seurat object with signature score added to metadata
71,signatures,`myR/R/signatures/signature_scoring.R`,`add_progeny_scores`,Infers pathway activities using progeny and adds them to the Seurat object's metadata.,"`seurat_obj`: A Seurat object, `organism`: Organism: ""Human"" or ""Mouse"" (default: ""Human""), `topn`: Number of top genes per pathway (default: 100), `...`: Additional arguments passed to progeny::progeny",Seurat object with pathway activity scores in metadata
72,signatures,`myR/R/signatures/signature_scoring.R`,`score_signature`,Applies a gene signature (from find_gene_signature) to score new expression data.,"`expr_data`: Seurat object or expression matrix, `signature`: gene_signature object from find_gene_signature, `normalize`: Whether to z-score normalize scores (default: TRUE)",Named numeric vector of signature scores
73,utilities,`myR/R/utilities/demulti_utils.R`,`get_best_two`,Finds the two highest probabilities from a vector.,`probs`: Numeric vector of probabilities,"List containing: best, best_idx, second, second_idx"
74,utilities,`myR/R/utilities/demulti_utils.R`,`get_barcode_mapping`,Assigns barcodes (cell identities) to samples based on probability matrix.,"`prob_matrix`: Matrix where rows are cells and columns are samples, containing assignment probabilities, `singlet_threshold`: Minimum probability for singlet assignment (default: 0.5), `doublet_threshold`: Minimum probability for doublet assignment (default: 0.3), `return_probs`: Whether to return probability values (default: FALSE)","Data frame with columns: barcode, assignment, type, prob1, prob2"
75,utilities,`myR/R/utilities/demulti_utils.R`,`is_doublet`,"Determines if a sample identifier represents a doublet (contains ""+"").",`sample_name`: Character vector of sample names,Logical vector indicating doublet status
76,utilities,`myR/R/utilities/demulti_utils.R`,`generate_sample_values`,Creates a list of sample identifiers including both singlets and doublets.,"`n_samples`: Number of samples, `include_doublets`: Whether to include doublet combinations (default: TRUE), `prefix`: Prefix for sample names (default: ""Sample"")",Character vector of sample identifiers
77,utilities,`myR/R/utilities/demulti_utils.R`,`generate_sample_names`,Creates formatted sample name lists for display/plotting.,"`n_samples`: Number of samples, `format`: Format string with %d placeholder (default: ""Sample %d""), `include_doublets`: Whether to include doublet combinations (default: TRUE)",Character vector of formatted sample names
78,utilities,`myR/R/utilities/demulti_utils.R`,`parse_doublet_name`,Extracts the two sample identifiers from a doublet name.,"`doublet_name`: Character string representing a doublet (e.g., ""Sample1+Sample2""), `separator`: Character used to separate samples (default: ""+"")","Character vector of length 2 with the two sample names, or NULL if not a doublet"
79,utilities,`myR/R/utilities/demulti_utils.R`,`filter_demulti_results`,Filters barcode assignments based on type and quality criteria.,"`assignments`: Data frame from get_barcode_mapping, `keep_singlets`: Keep singlet assignments (default: TRUE), `keep_doublets`: Keep doublet assignments (default: FALSE), `keep_negative`: Keep negative/unassigned cells (default: FALSE), `min_prob`: Minimum probability threshold (if prob columns exist)",Filtered data frame
80,utilities,`myR/R/utilities/demulti_utils.R`,`summarize_demulti_results`,Generates summary statistics for demultiplexing results.,`assignments`: Data frame from get_barcode_mapping,"List containing: n_total, n_singlets, n_doublets, n_negative, doublet_rate, assignment_rate"
81,utilities,`myR/R/utilities/general_utils.R`,`downsample_sobj`,This function randomly samples cells from a Seurat object to create a smaller subset. The sampling is done without replacement and maintains the original data structure.,"`sobj`: A Seurat object to be downsampled, `ratio`: Integer indicating the downsampling ratio (1:ratio). Default is 10, meaning the output will contain 1/10th of the original cells, `seed`: Integer specifying the random seed for reproducibility. Default is 1234",A downsampled Seurat object containing a subset of cells from the input object
82,utilities,`myR/R/utilities/general_utils.R`,`printmy`,Convenience function to print marker genes in a format ready for copy-paste.,"`markers`: Data frame with marker gene results, `sign`: Sign of log2FC to print (""+"" for positive, ""-"" for negative), `num`: Number of genes to print (default: 100), `pseudobulk`: Whether markers are from pseudobulk analysis (uses ""logFC"" instead of ""avg_log2FC"")",Prints genes to console
83,utilities,`myR/R/utilities/general_utils.R`,`printMy`,Print marker genes from a named list of marker data frames.,"`markers_list`: Named list of marker data frames, `...`: Additional arguments passed to printmy()",Prints genes to console with list names as headers
84,utilities,`myR/R/utilities/general_utils.R`,`print_gene_combinations`,"For a list of gene sets, print genes that are unique to each combination (e.g., genes in A only, genes in A & B only, etc.)","`gene_list`: Named list of character vectors. Each element is a gene vector., `num_print`: Integer. Maximum number of genes to print per combination (default: 100).",None (prints to console)
85,utilities,`myR/R/utilities/general_utils.R`,`%||%`,Returns the first non-NULL value.,"`a`: First value, `b`: Second value (returned if a is NULL)","a if not NULL, otherwise b"
86,utilities,`myR/R/utilities/plot_utils.R`,`save_plot_with_conflict_resolution`,"Saves a plot to a file, automatically handling filename conflicts by appending a number to the filename if it already exists.","`plot_object`: ggplot2 object or other plot object, `base_filename`: Base filename (with extension), `output_dir`: Directory to save plot to, `width`: Plot width in inches, `height`: Plot height in inches, `dpi`: Resolution in dots per inch, `device`: Device to use for saving (auto-detected from extension if NULL)",The full path to the saved file
87,utilities,`myR/R/utilities/plot_utils.R`,`get_default_plot_dims`,Returns sensible default plot dimensions based on plot type.,"`plot_type`: Type of plot (""heatmap"", ""scatter"", ""boxplot"", ""default""), `n_items`: Number of items (e.g., genes, clusters) - used for sizing",List with width and height in inches
88,utilities,`myR/R/utilities/plot_utils.R`,`sanitize_filename`,Removes or replaces characters that are problematic in filenames.,"`filename`: Filename to sanitize, `replacement`: Character to replace problematic characters with (default: ""_"")",Sanitized filename
89,utilities,`myR/R/utilities/plot_utils.R`,`create_plot_grid`,Helper to calculate optimal grid layout dimensions.,"`n_plots`: Number of plots to arrange, `ncol`: Desired number of columns (if NULL, calculated automatically), `nrow`: Desired number of rows (if NULL, calculated automatically)",List with ncol and nrow
90,utilities,`myR/R/utilities/plot_utils.R`,`add_significance_stars`,Converts p-values to significance stars.,"`p_values`: Numeric vector of p-values, `thresholds`: Named vector of thresholds (default: c(""***""=0.001, ""**""=0.01, ""*""=0.05)), `ns_symbol`: Symbol for non-significant (default: ""ns"")",Character vector of significance symbols
91,utilities,`myR/R/utilities/plot_utils.R`,`get_color_palette`,Returns a color palette for consistent styling across plots.,"`name`: Palette name (""default"", ""viridis"", ""Set1"", ""custom""), `n`: Number of colors needed",Vector of color codes
92,utilities,`myR/R/utilities/sample_utils.R`,`sort_samples`,"Sorts character sample identifiers, handling both single-number and dual-number strings (e.g., ""1"", ""2+3"", ""10""). Numeric samples are sorted numerically, with doublets (containing ""+"") sorted after singlets.",`samples`: Character vector of sample identifiers,Sorted character vector of sample IDs
93,utilities,`myR/R/utilities/sample_utils.R`,`generate_sample_names`,Helper function to generate standardized sample names.,"`n_samples`: Number of samples to generate names for, `prefix`: Prefix for sample names (default: ""Sample""), `start_index`: Starting index (default: 1)",Character vector of sample names
94,utilities,`myR/R/utilities/sample_utils.R`,`parse_sample_ids`,Extracts numeric components from sample identifiers.,"`samples`: Character vector of sample identifiers, `return_doublets`: Whether to return doublet information","Data frame with columns: sample, numeric1, numeric2 (if doublet), is_doublet"
95,visualization,`myR/R/visualization/basic_plots.R`,`mybar`,Generates a histogram for a numeric vector or a column in a data frame.,"`x`: Numeric vector or data frame, `col`: If x is data frame, column name or index, `bins`: Number of bins (default: 30), `title`: Plot title, `xlab`: X-axis label, `color`: Fill color (default: ""steelblue"")",ggplot2 object
96,visualization,`myR/R/visualization/basic_plots.R`,`mydensity`,Generates a density plot for a numeric vector or a column in a data frame.,"`x`: Numeric vector or data frame, `col`: If x is data frame, column name or index, `title`: Plot title, `xlab`: X-axis label, `color`: Fill color (default: ""steelblue""), `alpha`: Transparency (default: 0.5)",ggplot2 object
97,visualization,`myR/R/visualization/basic_plots.R`,`myline`,Creates a line plot for a numeric vector with optional cutoff line.,"`vec`: Numeric vector, `cutoff`: Optional horizontal cutoff line value, `show_intersection`: Show intersection point with cutoff (default: TRUE), `title`: Plot title, `xlab`: X-axis label (default: ""Index""), `ylab`: Y-axis label (default: ""Value""), `color`: Line color (default: ""steelblue"")",ggplot2 object
98,visualization,`myR/R/visualization/basic_plots.R`,`mylines`,Creates a line plot for multiple numeric vectors with optional dual y-axis.,"`vec1`: First numeric vector, `vec2`: Second numeric vector (optional), `cutoff1`: Cutoff for vec1, `cutoff2`: Cutoff for vec2, `title`: Plot title, `ylab1`: Y-axis label for vec1, `ylab2`: Y-axis label for vec2, `color1`: Color for vec1 (default: ""steelblue""), `color2`: Color for vec2 (default: ""darkred"")",ggplot2 object
99,visualization,`myR/R/visualization/basic_plots.R`,`cdf`,"Computes and plots the CDF for probability, logit, or ratio values.","`values`: Numeric vector of values, `type`: Type of values: ""prob"", ""logit"", or ""ratio"" (default: ""prob""), `title`: Plot title, `xlab`: X-axis label, `color`: Line color (default: ""steelblue"")",ggplot2 object
100,visualization,`myR/R/visualization/basic_plots.R`,`cdf_multi`,Computes and plots CDFs across multiple or grouped datasets.,"`data_list`: List of numeric vectors or data frame with grouping column, `group_col`: If data is data.frame, column name for grouping, `value_col`: If data is data.frame, column name for values, `type`: Type of values: ""prob"", ""logit"", or ""ratio"" (default: ""prob""), `title`: Plot title, `xlab`: X-axis label",ggplot2 object
101,visualization,`myR/R/visualization/composition_plots.R`,`cmb`,Creates a proportional stacked bar graph of clusters across samples.,"`sobj`: Seurat object, `cluster_col`: Cluster identity column (default: ""seurat_clusters""), `sample_col`: Sample grouping column, `colors`: Color palette (optional), `title`: Plot title, `xlab`: X-axis label, `ylab`: Y-axis label (default: ""Proportion"")",ggplot2 object
102,visualization,`myR/R/visualization/composition_plots.R`,`acmb`,Creates an absolute count stacked bar graph of clusters across samples.,"`sobj`: Seurat object, `cluster_col`: Cluster identity column (default: ""seurat_clusters""), `sample_col`: Sample grouping column, `colors`: Color palette (optional), `title`: Plot title, `xlab`: X-axis label, `ylab`: Y-axis label (default: ""Cell Count"")",ggplot2 object
103,visualization,`myR/R/visualization/composition_plots.R`,`cml`,Produces a cumulative line plot of per-cluster cell proportions.,"`sobj`: Seurat object, `cluster_col`: Cluster identity column (default: ""seurat_clusters""), `sample_col`: Sample grouping column, `title`: Plot title, `xlab`: X-axis label (default: ""Sample""), `ylab`: Y-axis label (default: ""Cumulative Proportion"")",ggplot2 object
104,visualization,`myR/R/visualization/composition_plots.R`,`upset_gene_lists`,Creates an UpSet plot for visualizing intersections of multiple gene lists.,"`gene_lists`: Named list of character vectors (gene lists), `min_size`: Minimum intersection size to display (default: 0), `nsets`: Number of sets to display (default: all), `nintersects`: Number of intersections to display (default: 40), `order_by`: Order by: ""freq"" or ""degree"" (default: ""freq""), `...`: Additional arguments passed to UpSetR::upset",UpSet plot
105,visualization,`myR/R/visualization/composition_plots.R`,`vln_p`,Generates violin plots with statistical testing using ggpubr.,"`sobj`: Seurat object, `features`: Features to plot, `group_by`: Grouping variable, `split_by`: Optional splitting variable, `test_method`: Statistical test: ""wilcox"", ""t.test"", ""anova"", ""kruskal"" (default: ""wilcox""), `comparisons`: List of comparisons (default: all pairwise), `ncol`: Number of columns for faceting (default: NULL)",ggplot2 object
106,deprecated,`myR/R/deprecated/pseudobulk_deg_standalone.R`,`prepare_pseudobulk_edgeR`,Aggregates single-cell counts to pseudo-bulk level for differential expression analysis.,"`object`: Seurat object, `sample_col`: Metadata column identifying samples/replicates, `group_col`: Metadata column for grouping (e.g., condition, treatment), `cluster_col`: Optional cluster column for per-cluster analysis (default: NULL), `target_cluster`: If cluster_col is specified, analyze only this cluster (default: NULL), `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts""), `min_cells`: Minimum cells per sample to include (default: 10), `min_counts`: Minimum total counts per gene (default: 10)","List containing: counts, metadata, cluster"
107,deprecated,`myR/R/deprecated/pseudobulk_deg_standalone.R`,`run_pseudobulk_deg`,Performs edgeR-based pseudo-bulk differential gene expression analysis.,"`object`: Seurat object or prepared pseudobulk list from prepare_pseudobulk_edgeR, `sample_col`: Metadata column identifying samples (required if object is Seurat), `group_col`: Metadata column for comparison (required if object is Seurat), `comparison`: Comparison to make (e.g., c(""Treatment"", ""Control"")), `cluster_col`: Optional cluster column (default: NULL), `target_cluster`: Specific cluster to analyze (default: NULL for overall), `mode`: Analysis mode: ""overall"", ""per_cluster"", ""specific_cluster"" (default: ""overall""), `assay`: Assay to use (default: ""RNA""), `slot`: Slot to use (default: ""counts""), `min_cells`: Minimum cells per sample (default: 10), `min_counts`: Minimum total counts per gene (default: 10), `fdr_threshold`: FDR threshold for significance (default: 0.05), `logfc_threshold`: Log fold change threshold (default: 0)","Data frame with differential expression results, or list of data frames if mode=""per_cluster"""
108,deprecated,`myR/R/deprecated/pseudobulk_deg_standalone.R`,`.run_edger_analysis`,Internal edgeR Analysis Function.,"`counts`: counts, `metadata`: metadata, `group_col`: group_col, `comparison`: comparison, `fdr_threshold`: fdr_threshold, `logfc_threshold`: logfc_threshold",Data frame with edgeR results
109,myR/R/,`myR/R/cluster_frequency.R`,`seurat_group_stats`,This function performs comprehensive statistical analysis on scRNA-seq data comparing groups across different categorical variables.,"`data`: A Seurat object or metadata dataframe, `grouping_var`: Character. Variable to group by (e.g., ""patient""), `categorizing_var`: Character. Dependent variable (e.g., ""seurat_clusters""), `comparative_var`: Character. Independent variable (e.g., ""condition"", ""smoking_status""), `test_use`: Character vector. Statistical tests to use, options: ""t"", ""u"", or both c(""t"", ""u""), `...`: Additional arguments (not used)",A data frame with statistical test results
110,myR/R/,`myR/R/cluster_frequency.R`,`seurat_posthoc_analysis`,This function performs post-hoc analysis based on results from seurat_group_stats.,"`data`: A Seurat object or metadata dataframe, `results`: Results dataframe from seurat_group_stats function, `alpha`: Significance level (default: 0.05)",A list of post-hoc test results
111,myR/R/,`myR/R/cluster_frequency.R`,`extract_sample_metadata`,Extract sample-level metadata from cell-level metadata,"`cell_metadata`: Cell-level metadata (Seurat object or data.frame), `sample_key`: Column name for sample identification, `target_key`: Column name for the target variable (e.g., cluster), `group_key`: Column name for grouping variable (e.g., prognosis), `fun`: Aggregation function (default: proportion calculation)",Data frame with sample-level aggregated data
112,myR/R/,`myR/R/cluster_frequency.R`,`perform_prior_tests`,Perform prior tests for statistical assumptions,"`data`: Data frame with sample-level data, `value_col`: Column name for the values to test, `group_col`: Column name for grouping variable",List with test results
113,myR/R/,`myR/R/cluster_frequency.R`,`plot_cluster_fractions`,Main function to create boxplot with statistical comparisons,"`sobj_metadata`: Seurat object or metadata data.frame, `sample_key`: Column name for sample identification, `cluster_key`: Column name for clusters, `group_key`: Column name for grouping (e.g., prognosis), `clusters_to_plot`: Vector of clusters to include (NULL for all), `groups_to_plot`: Vector of groups to include (NULL for all), `method`: Statistical test method, `prior_test`: Whether to perform prior tests, `palette`: Color palette for groups, `show_brackets`: Whether to show brackets for comparisons, `p_label_size`: Size of p-value labels, `...`: Additional arguments for ggplot",A list containing the ggplot object and a dataframe with statistics.
114,myR/R/,`myR/R/cluster_frequency.R`,`example_usage`,Example usage function for `plot_cluster_fractions`,,Prints a plot and statistics table.
115,myR/R/,`myR/R/cluster_frequency.R`,`calculate_sample_signatures`,Calculate custom signatures at sample level,"`seurat_obj`: Seurat object, `gene_sets`: Named list of gene sets, `sample_key`: Column name for sample identification, `method`: Scoring method (mean, ssgsea, etc.)",Data frame with sample-level signatures
116,myR/R/,`myR/R/cluster_frequency.R`,`adjust_confounders`,Adjust for confounding variables,"`data`: Data frame with sample-level data, `target_col`: Column name for target variable, `group_col`: Column name for grouping variable, `adjust_cols`: Vector of columns to adjust for, `method`: Adjustment method (residuals, stratification)",Adjusted data frame
117,myR/R/,`myR/R/cluster_frequency.R`,`add_simple_pvalues`,Add p-values without brackets (similar to first image style),"`plot_obj`: ggplot object, `stats_df`: Statistics dataframe, `plot_data`: Plot data with x_labels, `p_label_size`: Size of p-value text",Modified ggplot object
118,myR/R/,`myR/R/pseudotime.R`,`run_slingshot_from_seurat`,"This function takes a Seurat object (typically after PCA, UMAP, and clustering), runs Slingshot to infer trajectories, and returns a SingleCellExperiment object containing the Slingshot results (pseudotime and cell weights).","`seurat_obj`: A Seurat object., `cluster_col`: A character string specifying the column name in Seurat object's metadata that contains the cluster labels., `reduced_dim_name`: A character string specifying the name of the dimensionality reduction to use (e.g., ""UMAP"", ""PCA""). Default is ""UMAP""., `start_cluster`: A character string or numeric value specifying the identity of the starting cluster., `end_clusters`: Optional. A character vector or numeric vector specifying identities of known end clusters., `counts_assay_name`: Character string, the name of the assay in the Seurat object containing counts. Default is ""RNA""., `main_trajectory_only`: Logical. Placeholder for future implementation. Default is FALSE., `...`: Additional arguments to pass to `slingshot::slingshot()`.",A SingleCellExperiment object with Slingshot's results.
119,myR/R/,`myR/R/pseudotime.R`,`save_plot_with_conflict_resolution`,"Saves a plot to a file, automatically handling filename conflicts by appending a number to the filename if it already exists.","`plot_object`: ggplot2 object or other plot object., `base_filename`: Base filename (with extension)., `output_dir`: Directory to save plot to., `width`: Plot width in inches., `height`: Plot height in inches., `dpi`: Resolution in dots per inch.",The full path to the saved file.
120,myR/R/,`myR/R/pseudotime.R`,`analyze_gene_dynamics`,"This function fits a Generalized Additive Model (GAM) to model gene expression changes along pseudotime, potentially accounting for different conditions.","`gene_id`: A character string specifying the gene ID., `cds_obj`: A cell_data_set object from Monocle3., `condition_col_name`: A character string naming the column in `colData(cds_obj)` that contains the condition information., `pseudotime_method`: A function or character string to specify how pseudotime is extracted. Defaults to `monocle3::pseudotime`., `sample_col_name`: Optional. A character string naming the column for sample/patient IDs., `output_dir`: A character string specifying the directory to save plots., `k_val`: An integer, the number of basis functions for GAM splines., `min_cells_for_fit`: An integer, the minimum number of cells required to fit the GAM., `plot_split`: Logical, if TRUE, plots for different conditions will be faceted., `plot_width`: Width of the saved plot in inches., `plot_height`: Height of the saved plot in inches., `plot_dpi`: DPI of the saved plot., `scale_DR`: Logical, if TRUE, Dynamic Range (DR) will be scaled by the mean expression.","A list containing status, metrics, plot path, and the plot object."
121,myR/R/,`myR/R/pseudotime.R`,`process_gene_list_dynamics`,Helper to process a list of genes using `analyze_gene_dynamics`.,"`gene_list`: A character vector of gene IDs., `cds_obj`: A cell_data_set object from Monocle3., `condition_col_name`: Column name for conditions in `colData(cds_obj)`., `output_dir`: Directory to save plots., `num_cores`: Number of cores for parallel processing., `...`: Other arguments to pass to `analyze_gene_dynamics`.",A data.frame summarizing metrics for all successfully processed genes.
122,myR/R/,`myR/R/pseudotime.R`,`analyze_gene_dynamics_tradeSeq`,Fits GAMs using the tradeSeq framework for a specific gene and performs tests for differential progression or expression patterns along pseudotime trajectories.,"`gene_id`: A character string, the ID of the gene to analyze., `sce_obj`: A SingleCellExperiment object, typically output from `run_slingshot_from_seurat`., `condition_col`: A character string specifying the column name in `colData(sce_obj)` that contains the condition factor., `lineage_names`: A character vector specifying which lineages to test., `nknots`: An integer, the number of knots for GAM splines in `fitGAM`., `test_to_perform`: A character string. Currently supports ""patternTest""., `pseudotime_assay_name`: Character. Name of the reducedDim in SCE containing pseudotime. Default ""slingshot""., `weights_col_prefix`: Character. Prefix for colData columns containing cell weights. Default ""slingWeight""., `output_dir`: A character string specifying the directory to save plots., `plot_split`: Logical, if TRUE, plots for different conditions will be faceted. Default FALSE., `scale_DR`: Logical, if TRUE, Dynamic Range (DR) will be scaled by the mean expression., `fitGAM_args`: A list of additional arguments to pass to `tradeSeq::fitGAM`., `test_args`: A list of additional arguments to pass to the chosen test function.","A list containing status, metrics, plot path, and the plot object."
123,myR/R/,`myR/R/GeoMx.R`,`prepare_geomx_data`,Prepares raw GeoMx count data for analysis by organizing into a standard format.,"`raw_data`: Raw data matrix., `metadata_SP`: Metadata data frame.","List containing: expression, metadata, and gene_info."
124,myR/R/,`myR/R/GeoMx.R`,`q3_normalize`,Performs Q3 (third quartile) normalization on GeoMx count data.,"`expr_matrix`: Count matrix., `scaling_factor`: Scaling factor after normalization (default: 1000).",List containing normalized and log-normalized data.
125,myR/R/,`myR/R/GeoMx.R`,`perform_qc`,Performs basic QC checks and filtering on GeoMx data.,"`expr_matrix`: Count matrix., `metadata`: Metadata data frame.",List with QC metrics and plots.
126,myR/R/,`myR/R/GeoMx.R`,`find_deg_geomx`,Performs differential expression analysis on GeoMx data using limma or Wilcoxon test.,"`norm_expr`: Normalized expression matrix., `metadata`: Metadata data frame., `group_var`: Metadata column for grouping., `group1`: First group for comparison., `group2`: Second group for comparison (optional)., `method`: ""limma"" or ""wilcox"" (default: ""limma"")., `logFC_threshold`: Log fold change threshold (default: 0.5)., `pval_threshold`: P-value threshold (default: 0.05).",Data frame with differential expression results.
127,myR/R/,`myR/R/GeoMx.R`,`plot_deg_volcano`,Creates a volcano plot from differential expression results.,"`deg_results`: Data frame from `find_deg_geomx`., `title`: Plot title.",ggplot object.
128,myR/R/,`myR/R/GeoMx.R`,`plot_deg_heatmap`,Creates a heatmap of top differentially expressed genes.,"`norm_expr`: Normalized expression matrix., `deg_results`: Data frame from `find_deg_geomx`., `metadata`: Metadata data frame., `group_var`: Metadata column for grouping., `top_n`: Number of top genes to plot (default: 50)., `scale_rows`: Z-score scale rows (default: TRUE).",Heatmap plot.
129,myR/R/,`myR/R/GeoMx.R`,`run_geomx_analysis`,Wrapper function to run the complete GeoMx analysis workflow.,"`raw_data`: Raw data matrix., `metadata_SP`: Metadata data frame., `group_var`: Column for differential expression., `group1`: First group for comparison., `group2`: Second group for comparison (optional)., `qc_filter`: Perform QC filtering (default: TRUE)., `min_genes`: Minimum number of detected genes per ROI (default: 100)., `min_counts`: Minimum total counts per ROI (default: 1000).","List containing processed data, DEG results, and plots."
130,myR/R/,`myR/R/markers.R`,`marker_trim`,Filter and process marker genes from Seurat's FindMarkers or FindAllMarkers results.,"`markers`: A data frame from Seurat's FindMarkers or FindAllMarkers results., `sign`: Character string indicating the direction of log fold change to keep. Options: NULL (keep all), ""+"" (positive only), ""-"" (negative only)., `p_cutoff`: Numeric value for adjusted p-value cutoff. Default is NULL (no filtering)., `filter`: Additional filtering criteria (not used in this function).",A processed data frame with filtered markers and added pct.diff column.
131,myR/R/,`myR/R/markers.R`,`marker_filter`,Filter out unwanted genes from marker results.,"`markers`: A data frame from Seurat's FindMarkers or FindAllMarkers results., `filter`: Character vector specifying which gene types to filter out. Options: ""rb"", ""mt"", ""hb"", ""AC"", ""ENSG"", ""LINC"".",A filtered data frame with unwanted genes removed.
132,myR/R/,`myR/R/markers.R`,`lrf`,filterout (Intercept) terms.,`lmm_result`: The result from an LMM analysis.,"The LMM result with ""(Intercept)"" terms removed from the summary."
133,myR/R/,`myR/R/markers.R`,`all_markers_to_list`,Convert FindAllMarkers results to a list organized by cluster.,`markers`: A data frame from Seurat's FindAllMarkers results.,A list where each element is a data frame containing markers for one cluster.
134,myR/R/,`myR/R/markers.R`,`marker_print_all`,Print top marker genes for each cluster.,"`markers`: Either a list of marker data frames or a FindAllMarkers data frame., `n`: Integer specifying the number of top markers to print per cluster., `cluster_to_print`: Character vector specifying which clusters to print. If NULL, prints all clusters.",NULL (prints results to console).
135,myR/R/,`myR/R/markers.R`,`marker_print`,Print top n marker genes.,"`marker`: A marker data frame., `n`: Number of genes to print (default: 100)., `sign`: ""+"" for positive logFC, ""-"" for negative.",NULL (prints results to console).
136,myR/R/,`myR/R/markers.R`,`synthesize_markers`,Combines p-values and log fold changes from multiple FindMarkers results using Fisher's method for p-values and weighted mean for log fold changes.,"`marker_list`: Named list of marker data frames, `p_sig`: The p-value column to use for significance check (default: ""p_val_adj"").",Data frame with synthesized results
137,myR/R/,`myR/R/markers.R`,`synthesize_ranks`,Combines ranks from multiple FindMarkers results using geometric mean of ranks.,"`marker_list`: Named list of marker data frames, `rank_by`: Column to rank by (default: ""p_val"").",Data frame with synthesized ranks.
138,myR/R/,`myR/R/plots.R`,`mybar`,Generates a histogram for a numeric vector or a column in a data frame.,"`data`: Numeric vector or data frame., `column`: If data is data frame, column name or index., `bins`: Number of bins (default: NULL)., `x_unit`: Unit for x-axis label., `y_unit`: Unit for y-axis label., `xlab`: X-axis label., `main`: Plot title.",Prints a ggplot object.
139,myR/R/,`myR/R/plots.R`,`myline`,Creates a line plot for a single vector with cutoff intersection.,"`vector`: Numeric vector., `main`: Plot title., `ylab`: Y-axis label., `cutoff`: Optional horizontal cutoff line value., `cutoff_col`: Color for the cutoff line., `show_intersection`: Show intersection point with cutoff (default: TRUE)., `...`: Additional arguments to `plot()`.",A base R plot.
140,myR/R/,`myR/R/plots.R`,`mylines`,Creates a line plot for multiple numeric vectors with dual y-axis support.,"`...`: Numeric vectors for the left y-axis., `vectors_right`: A single vector or a list of vectors for the right y-axis., `main`: Plot title., `ylab`: Left y-axis label., `ylab_right`: Right y-axis label., `cutoff`: Cutoff for left y-axis vectors., `cutoff_right`: Cutoff for right y-axis vectors., `cutoff_col`: Color for the left cutoff line., `cutoff_col_right`: Color for the right cutoff line., `legend_pos`: Position of the legend., `show_intersection`: Show intersection points (default: TRUE).",A base R plot with multiple lines.
141,myR/R/,`myR/R/plots.R`,`find_and_mark_intersection`,Helper function to find and mark the intersection point on a line plot.,"`x_vals`: X values of the line., `y_vals`: Y values of the line., `cutoff`: The cutoff value., `col`: Color for the intersection point and label., `label_prefix`: Prefix for the intersection label.",Adds points and text to an existing plot.
142,myR/R/,`myR/R/plots.R`,`mydensity`,Generates a density plot for a numeric vector or a column in a data frame.,"`data`: Numeric vector or data frame., `column`: If data is data frame, column name or index., `adjust`: Bandwidth adjustment., `x_unit`: Unit for x-axis label., `y_unit`: Unit for y-axis label., `xlab`: X-axis label., `main`: Plot title.",Prints a ggplot object.
143,myR/R/,`myR/R/plots.R`,`mybox`,Generate boxplots of average feature expression from a Seurat object.,"`sobj`: A Seurat object., `features`: A character vector of features to plot., `sample_col`: The name of the metadata column identifying samples/patients., `group.by`: The name of the metadata column for primary grouping on the x-axis., `split.by`: The name of the metadata column for secondary grouping., `idents`: A character vector of values from the `group.by` column to include., `assay`: The assay to use for gene features., `layer`: The layer to use for gene features., `ncol`: Number of columns for arranging plots., `pt.size`: Size of points for individual sample averages., `violin`: Whether to overlay violin plots.",A ggplot object.
144,myR/R/,`myR/R/plots.R`,`mybox_df`,Generate boxplots of average feature values from a data frame.,"`df`: A data frame., `features`: A character vector of feature column names to plot., `sample_col`: The name of the column identifying samples/patients., `group.by`: The name of the column for primary grouping on the x-axis., `split.by`: The name of the column for secondary grouping., `idents`: A character vector of values from the `group.by` column to include., `ncol`: Number of columns for arranging plots., `pt.size`: Size of points for individual sample averages., `violin`: Whether to overlay violin plots.",A ggplot object.
145,myR/R/,`myR/R/plots.R`,`upset_gene_lists`,Creates an UpSet plot for visualizing intersections of multiple gene lists.,"`gene_lists`: Named list of character vectors (gene lists)., `sets`: Optional character vector to specify the order of sets., `min_size`: Minimum intersection size to display., `width_ratio`: Ratio of main plot and bar plot widths., `keep_sets`: Character vector of specific sets to include in the plot.",A ggplot object.
146,myR/R/,`myR/R/plots.R`,`vln_p`,Creates violin plots with statistical comparisons.,"`sobj`: Seurat object., `feature`: Features to plot., `group.by`: Grouping variable., `split.by`: Splitting variable., `pt.size`: Point size., `ncol`: Number of columns for faceting., `...`: Additional arguments passed to `VlnPlot`.",A ggplot object.
147,myR/R/,`myR/R/plots.R`,`cmb`,Creates a proportional stacked bar graph of clusters.,"`sobj`: A Seurat object., `identity`: The identity to use for clustering (default: ""seurat_clusters"")., `group.by`: The metadata column to group by (default: ""sample"")., `idents`: Which identities to include., `df`: If TRUE, returns the data frame used for plotting., `vlines`: X-axis positions for vertical lines., `vline_color`: Color for vertical lines.",A ggplot object or a data frame.
148,myR/R/,`myR/R/plots.R`,`acmb`,Creates an absolute count stacked bar graph of clusters.,"`sobj`: A Seurat object., `identity`: The identity to use for clustering (default: ""seurat_clusters"")., `group.by`: The metadata column to group by (default: ""sample"")., `idents`: Which identities to include., `df`: If TRUE, returns the data frame used for plotting., `vlines`: X-axis positions for vertical lines., `vline_color`: Color for vertical lines.",A ggplot object or a data frame.
149,myR/R/,`myR/R/plots.R`,`myhm_genesets2`,Creates a heatmap of gene set expression per cluster.,"`sobj`: A Seurat object., `group`: The identity to use for clustering., `value`: How to aggregate expression values (""average"" or ""sum"")., `assay`: Which assay to use., `gene_sets`: A list of character vectors (gene sets)., `title`: Plot title., `x_label`: X-axis label., `y_label`: Y-axis label.",A data frame with normalized expression values.
150,myR/R/,`myR/R/plots.R`,`myhm_genes2`,Creates a heatmap of individual gene expression per cluster.,"`sobj`: A Seurat object., `group`: The identity to use for clustering., `value`: How to aggregate expression values (""average"" or ""sum"")., `assay`: Which assay to use., `genes`: Character vector of gene names to plot., `title`: Plot title., `x_label`: X-axis label., `y_label`: Y-axis label.",A data frame with normalized expression values.
151,myR/R/,`myR/R/plots.R`,`cml`,Produces a cumulative line plot of per-cluster cell proportions.,"`sobj`: A Seurat object., `cluster_col`: Metadata column with cluster IDs., `group.by`: Metadata column for grouping., `sort.by`: Cluster ordering strategy (""name"" or ""frequency"")., `df`: If TRUE, returns the data frame used for plotting., `color_palette`: Optional vector of colors., `n_patterns`, `n_shapes`: Number of linetypes/shapes to cycle.",A ggplot object or a data frame.
152,myR/R/,`myR/R/plots.R`,`cdf`,Computes and plots the Cumulative Distribution Function (CDF).,"`data`: A data frame., `probability_col`: Column with probability values., `ratio_col`: Column with probability ratio values., `plot_type`: ""probability"", ""logit"", or ""ratio""., `output_file`: Path to save the plot.",A list with the ggplot object and a summary data frame.
153,myR/R/,`myR/R/plots.R`,`cdf_multi`,Computes and plots CDFs across multiple or grouped datasets.,"`data_list`: A data frame or a list of data frames., `probability_col`: Column with probability values., `ratio_col`: Column with probability ratio values., `plot_type`: ""probability"", ""logit"", or ""ratio""., `group_by_col`: Column to group by if `data_list` is a single data frame., `sample_col`: Column to name datasets., `output_file`: Path to save the plot.",A list with the ggplot object and a summary data frame.
154,myR/R/,`myR/R/plots.R`,`scatter_smooth_colored`,Averaged Expression vs Numeric Covariate (with optional colour).,"`object`: A Seurat object or a data.frame., `feature`: Gene symbol or expression column name., `group.by`: Column used to aggregate cells into samples., `x_var`: Column providing the numeric predictor per cell., `transpose`: If TRUE, swap X and Y axes., `color_by`: Column name to color points., `palette`: Optional palette vector/name., `transparency`: Map `color_by` (numeric only) to point alpha., `transparency_desc`: If TRUE, higher values become more transparent., `fitted_line`: ""linear"", ""loess"", ""lasso"", or NULL.",A ggplot scatter-smooth plot.
155,myR/R/,`myR/R/plots.R`,`mybox_geomx`,Generate boxplots of average feature values from GeoMx data.,"`data_norm`: Normalized data matrix., `metadata`: Metadata data frame., `features`: A character vector of feature column names to plot., `group.by`: The name of the column for primary grouping., `split.by`: The name of the column for secondary grouping., `test_method`: ""t.test"" or ""wilcox.test""., `p_adjust_method`: P-value adjustment method., `hide_ns`: Hide non-significant p-values., `show_points`: Show individual data points., `comparisons`: ""all"" or a list of specific comparisons.",Prints ggplot objects and invisibly returns a list of statistical results.
156,myR/R/,`myR/R/plots.R`,`myhm_genesets4`,Creates a heatmap of gene set expression per cluster (version 4).,"`sobj`: A Seurat object., `group`: The identity to use for clustering., `value`: How to aggregate expression values (""average"" or ""sum"")., `assay`: Which assay to use., `gene_sets`: A list of character vectors (gene sets)., `title`: Plot title., `x_label`: X-axis label., `y_label`: Y-axis label.",A data frame with normalized expression values.
157,myR/R/,`myR/R/plots.R`,`myhm_genes4`,Creates a heatmap of individual gene expression per cluster (version 4).,"`sobj`: A Seurat object., `group`: The identity to use for clustering., `value`: How to aggregate expression values (""average"" or ""sum"")., `assay`: Which assay to use., `genes`: Character vector of gene names to plot., `title`: Plot title., `x_label`: X-axis label., `y_label`: Y-axis label.",A data frame with normalized expression values.
158,myR/R/,`myR/R/plots.R`,`%||%`,NULL coalescing operator.,"`a`: First value., `b`: Second value.","`a` if not NULL, otherwise `b`."
159,myR/R/,`myR/R/pathway_analysis.R`,`convert_gene_ids`,This function converts gene identifiers between different formats using the org.Hs.eg.db annotation package.,"`genes`: Character vector of gene identifiers to convert., `from`: Character string specifying the input ID type (default: ""SYMBOL"")., `to`: Character string specifying the output ID type (default: ""ENTREZID"").",Data frame with mapping between input and output gene IDs.
160,myR/R/,`myR/R/pathway_analysis.R`,`prepare_gene_lists`,This function processes differential expression results to create gene lists suitable for various pathway enrichment analyses.,"`deg_df`: Data frame containing differential expression results., `fc_threshold`: Numeric threshold for log2 fold change (default: 0.25)., `p_use`: Character string specifying which p-value to use (default: ""p_val_adj"")., `pval_threshold`: Numeric threshold for p-value significance (default: 0.05).","List containing ranked genes, up/down-regulated genes, and background."
161,myR/R/,`myR/R/pathway_analysis.R`,`get_pathway_sets`,Returns available pathway database identifiers for enrichment analysis.,"`pathway_set`: Character vector of specific pathway sets to return, or NULL to return all., `species`: Character string specifying species (default: ""Homo sapiens"").",Character vector of pathway set identifiers.
162,myR/R/,`myR/R/pathway_analysis.R`,`run_go_analysis`,Performs Gene Ontology enrichment analysis using clusterProfiler.,"`genes`: Character vector of gene symbols for analysis., `gene_type`: Character string describing gene set type (for logging)., `ont`: Character string specifying GO ontology: ""BP"", ""MF"", or ""CC""., `background`: Character vector of background genes (optional)., `pval_cutoff`: Numeric p-value cutoff for significance (default: 0.05).","enrichResult object from clusterProfiler, or NULL if no results."
163,myR/R/,`myR/R/pathway_analysis.R`,`run_kegg_analysis`,Performs KEGG pathway enrichment analysis using clusterProfiler.,"`genes`: Character vector of gene symbols for analysis., `background`: Character vector of background genes (optional)., `pval_cutoff`: Numeric p-value cutoff for significance (default: 0.05).","enrichResult object from clusterProfiler, or NULL if no results."
164,myR/R/,`myR/R/pathway_analysis.R`,`run_gsea_analysis`,Performs GSEA using fgsea with MSigDB gene sets.,"`ranked_genes`: Named numeric vector of genes ranked by fold change., `pathway_set`: Character string specifying pathway database (default: ""H"")., `min_size`: Minimum gene set size (default: 15)., `max_size`: Maximum gene set size (default: 500).",Data frame with GSEA results.
165,myR/R/,`myR/R/pathway_analysis.R`,`format_results`,Standardizes the output format from different pathway analysis methods.,"`result`: Results object from pathway analysis., `analysis_type`: Character string specifying analysis type: ""GO"", ""KEGG"", or ""GSEA"".",Data frame with standardized columns.
166,myR/R/,`myR/R/pathway_analysis.R`,`myGO`,Main function to perform comprehensive pathway enrichment analysis on differential expression results.,"`DEG`: Data frame with differential expression results., `seurat_obj`: Seurat object (currently not used)., `pathway_set`: Character vector specifying which pathway databases to use., `pathway`: Character string to filter results for specific pathway names (optional)., `analysis_type`: ""GO"", ""KEGG"", ""GSEA"", or ""ALL""., `go_ontology`: GO ontologies: ""BP"", ""MF"", ""CC""., `fc_threshold`: Log2 fold change threshold., `p_use`: Which p-value column to use., `pval_threshold`: P-value significance threshold., `gsea_min_size`: Minimum gene set size for GSEA., `gsea_max_size`: Maximum gene set size for GSEA., `return_plots`: Logical indicating whether to return plots (not implemented).",Named list containing analysis results for each method.
167,myR/R/,`myR/R/signature.R`,`AddMultipleModuleScores`,Calculates module scores for multiple gene sets using Seurat's AddModuleScore.,"`seurat_object`: A Seurat object., `feature_sets`: A named or unnamed list of character vectors (gene sets)., `assay`: Name of the assay to use., `slot`: Slot to pull expression data from., `nbin`: Number of bins for AddModuleScore., `ctrl`: Number of control features., `seed`: Random seed., `search`: Passed to Seurat::`[.Assay`., `...`: Additional arguments passed to Seurat::AddModuleScore.",A Seurat object with added module scores in the metadata.
168,myR/R/,`myR/R/signature.R`,`PlotModuleScoreHeatmap`,Visualizes module scores as a heatmap with z-score normalization and statistical testing.,"`sobj`: Seurat object., `gene_sets`: Named list of gene sets., `group`: Grouping variable., `assay`: Assay to use., `test_method`: ""wilcox"" or ""t""., `p_adjust`: P-value adjustment method., `show_pval`: Whether to show p-values on the heatmap., `scale_method`: ""feature"" or ""group""., `color_limits`: Manual color scale limits., `title`: Plot title., `x_label`: X-axis label., `y_label`: Y-axis label., `...`: Additional arguments passed to AddModuleScore.",A list containing the heatmap plot and statistical results.
169,myR/R/,`myR/R/signature.R`,`CompareModuleScoringMethods`,Compares the simple averaging method with AddModuleScore.,"`sobj`: Seurat object., `gene_sets`: Named list of gene sets., `group`: Grouping variable., `assay`: Assay to use.",A list containing results from both methods and a comparison plot.
170,myR/R/,`myR/R/signature.R`,`add_signature_enrichit`,Calculates a gene signature score using escape::enrichIt and adds it to metadata.,"`seurat_obj`: A Seurat object., `gene_source`: Path to a file or an R object with gene IDs., `signature_name`: Name for the new metadata column., `input_keytype`: Type of input gene IDs (e.g., ""ENSEMBL"", ""SYMBOL"")., `gene_col`: Column index/name for genes., `sheet_name`: Sheet name/index for xlsx files., `assay`: Assay to use., `layer`: Layer (slot) to use., `...`: Additional arguments for `escape::enrichIt`.",A Seurat object with the new signature score.
171,myR/R/,`myR/R/signature.R`,`add_progeny_scores`,Infers pathway activities using progeny and adds them to metadata.,"`seurat_obj`: A Seurat object., `organism`: ""Human"" or ""Mouse""., `topn`: Number of top genes per pathway., `...`: Additional arguments for `progeny::progeny`.",A Seurat object with pathway activity scores.
172,myR/R/,`myR/R/signature.R`,`linear_seurat`,Performs linear regression for gene expression.,"`sobj`: Seurat object., `layer`: ""counts"", ""data"", or ""scale.data""., `features`: Features to test., `regressor`: Regressor variable in metadata., `regressor.type`: ""continuous"", ""categorical"", or ""ordinal""., `reference.level`: Reference level for categorical regressor., `ordinal.method`: ""linear"", ""polynomial"", or ""spline""., `link.function`: ""linear"", ""poisson"", or ""negative.binomial""., `effect`: ""fixed"" or ""random""., `covariates`: Covariate column names., `min.cells`: Minimum cells expressing a gene., `return.full`: Return full results including Seurat object., `...`: Additional arguments for model fitting.",Data frame with regression results.
173,myR/R/,`myR/R/signature.R`,`plot_top_genes`,Helper function to visualize top results from `linear_seurat`.,"`results`: Results from `linear_seurat`., `sobj`: Seurat object., `layer`: Layer to get expression data from., `top_n`: Number of top genes to plot.",A grid of ggplot objects.
174,myR/R/,`myR/R/signature.R`,`example_usage`,Example usage for `linear_seurat`.,,None.
175,myR/R/,`myR/R/signature.R`,`find_gene_signature`,Discovers gene signatures that best separate a target variable.,"`data`: Seurat object, count matrix, or data.frame., `meta.data`: Optional metadata., `target_var`: Target variable column name., `target_group`: Groups to compare., `method`: ""tree_based"", ""lasso"", ""limma"", etc., `n_features`: Number of top features to return., `preprocess`: Whether to normalize/scale data., `min_cells`: Minimum cells expressing a gene., `min_pct`: Minimum percentage of cells expressing a gene., `return_model`: Whether to return the full model object., `seed`: Random seed., `...`: Additional method-specific parameters.",A list containing the gene signature and performance metrics.
176,myR/R/,`myR/R/signature.R`,`score_signature`,Applies a gene signature to score new expression data.,"`expr_data`: Seurat object or expression matrix., `signature`: A `gene_signature` object from `find_gene_signature`., `normalize`: Whether to z-score normalize scores.",Named numeric vector of signature scores.
177,myR/R/,`myR/R/signature.R`,`print.gene_signature`,Print method for `gene_signature` objects.,"`x`: A `gene_signature` object., `...`: Additional arguments.",Prints a summary to the console.
178,myR/R/,`myR/R/test_claude.R`,`create_analysis_config`,Centralizes metadata column names for consistent reference throughout analysis.,"`patient`: String. Column name for patient/subject identifier., `drug`: String. Column name for drug/treatment type., `timepoint`: String. Column name for timepoint (e.g., ""pre""/""post"")., `ck`: String. Column name for stratification variable (e.g., CK status)., `response`: String. Column name for treatment response classification., `aoi`: String. Column name for AOI (Area of Interest) unique identifier.",A list containing standardized column name mappings.
179,myR/R/,`myR/R/test_claude.R`,`validate_config`,Checks that all required columns exist in metadata and have valid values.,"`metadata`: Data frame. Seurat metadata or standalone metadata., `config`: List. Configuration object from create_analysis_config()., `required_cols`: Character vector. Which config columns are required.","Invisibly returns TRUE if valid, otherwise throws informative error."
180,myR/R/,`myR/R/test_claude.R`,`prepare_geomx_data`,"Reads count matrix and metadata from files (Excel or CSV), creates a Seurat object, and adds derived metadata columns for convenience in downstream analysis.","`count_file`: String. Path to count data file (.xlsx or .csv)., `metadata_file`: String. Path to metadata file (.xlsx or .csv)., `count_matrix`: Matrix. Raw count matrix (genes x samples)., `metadata`: Data.frame. Sample metadata., `config`: List. Configuration from create_analysis_config()., `normalize_method`: String. One of ""none"", ""log"", or ""quantile""., `min_cells`: Integer. Minimum cells expressing a gene to keep it., `min_features`: Integer. Minimum features per cell to keep it.",A Seurat object with added metadata columns.
181,myR/R/,`myR/R/test_claude.R`,`diagnose_sample_parity`,"For paired/longitudinal analyses, checks whether each patient (or group) has complete and balanced representation of required conditions.","`seurat_obj`: Seurat object., `config`: List. Configuration from create_analysis_config()., `grouping_vars`: Character vector. Metadata columns defining groups., `check_var`: String. The metadata column to check for parity., `required_values`: Character vector. Values that MUST be present in check_var for each group., `allow_extra`: Logical. If FALSE, groups with additional values will fail validation.","A list with summary, passed samples, failed groups, and a message."
182,myR/R/,`myR/R/test_claude.R`,`screen_genes`,Performs rapid statistical screening to identify candidate genes for computationally intensive LMM analysis.,"`seurat_obj`: Seurat object., `config`: List. Configuration from create_analysis_config()., `grouping_var`: String. Which variable to compare., `subset_var`: String. Optional. Metadata column to subset by., `subset_value`: Value to filter subset_var by., `min_pct`: Numeric. Minimum fraction of samples expressing gene in either group., `logfc_threshold`: Numeric. Minimum log fold-change threshold., `top_n`: Integer. Number of top genes to return., `test_method`: String. Statistical test method (default ""wilcox"").","A list containing all markers, top genes, and the subsetted Seurat object."
183,myR/R/,`myR/R/test_claude.R`,`fit_single_gene_lmm`,Internal helper function that fits an lmer model for one gene.,"`gene`: String. Gene name., `expr_vector`: Numeric vector. Expression values for the gene., `metadata`: Data frame. Sample metadata., `formula_str`: String. Complete model formula., `factor_cols`: Character vector. Columns to convert to factors., `reference_levels`: Named list. Factor reference levels.",List with model results or error information.
184,myR/R/,`myR/R/test_claude.R`,`run_lmm_analysis`,Main function for LMM analysis. Fits mixed-effects models to account for patient-level random effects.,"`seurat_obj`: Seurat object., `genes`: Character vector. Gene names to analyze., `config`: List. Configuration from create_analysis_config()., `fixed_effects`: Character vector. Fixed effect terms., `interactions`: Character vector. Interaction terms., `random_effects`: String. Random effects formula., `reference_levels`: Named list. Reference levels for factors., `n_cores`: Integer. Number of CPU cores for parallel processing., `verbose`: Logical. Print progress messages.",A list with LMM results.
185,myR/R/,`myR/R/test_claude.R`,`extract_significant_genes`,Filters LMM summary table to genes with significant effects for specific terms.,"`lmm_summary`: Data frame. The $summary component from run_lmm_analysis()., `term_pattern`: String. Regex pattern to match model terms., `p_threshold`: Numeric. Adjusted p-value threshold., `effect_threshold`: Numeric. Minimum absolute effect size., `top_n`: Integer. Maximum number of genes to return., `rank_by`: String. How to rank genes: ""effect"" or ""pvalue"".",Data frame of significant genes with their statistics.
186,myR/R/,`myR/R/test_claude.R`,`find_drug_response_genes`,Identifies genes where treatment response differs by drug type.,"`lmm_summary`: Data frame from run_lmm_analysis()$summary., `config`: List. Configuration object., `focus_drug`: String. Optional. Specific drug to focus on., `...`: Additional arguments passed to extract_significant_genes().",Data frame of genes with drug-specific response patterns.
187,myR/R/,`myR/R/test_claude.R`,`find_temporal_response_genes`,Identifies genes where expression changes over time depend on treatment response.,"`lmm_summary`: Data frame from run_lmm_analysis()$summary., `config`: List. Configuration object., `...`: Additional arguments passed to extract_significant_genes().",Data frame of genes with time-by-response interactions.
188,myR/R/,`myR/R/test_claude.R`,`plot_volcano`,Visualizes effect sizes and p-values for a specific model term.,"`lmm_summary`: Data frame from run_lmm_analysis()$summary., `term_pattern`: String. Regex to filter model terms., `effect_threshold`: Numeric. Threshold for ""large effect""., `p_threshold`: Numeric. P-value significance threshold., `label_top`: Integer. Number of top genes to label., `title`: String. Plot title.",ggplot object.
189,myR/R/,`myR/R/test_claude.R`,`plot_lmm_results`,Visualizes individual patient trajectories and estimated marginal means from a fitted LMM.,"`lmm_result`: List. Result for a single gene from run_lmm_analysis()$results., `gene`: String. Gene name (for titles)., `seurat_obj`: Seurat object (for raw data)., `config`: List. Configuration object., `facet_by`: String. Optional metadata column to facet by.","List with three ggplot objects: emmeans, trajectories, and contrasts."
190,myR/R/,`myR/R/test_claude.R`,`plot_gene_boxplot`,Simple visualization for a single gene's expression across timepoints.,"`seurat_obj`: Seurat object., `gene`: String. Gene name., `config`: List. Configuration object., `split_by`: String. Optional metadata column to facet by., `add_stats`: Logical. Add statistical comparison.",ggplot object.
191,myR/R/,`myR/R/test_claude.R`,`create_delta_matrix`,Alternative analysis approach that calculates per-patient change scores (post - pre) for each gene.,"`seurat_obj`: Seurat object., `config`: List. Configuration object., `assay`: String. Assay name., `slot`: String. Data slot., `subset_var`: String. Optional variable to subset by., `subset_value`: Value to filter subset_var by., `aggregate_fun`: Function to aggregate multiple AOIs per patient-timepoint.",List with delta_matrix and patient_metadata.
192,myR/R/,`myR/R/test_claude.R`,`export_lmm_results`,Saves LMM analysis results to a multi-sheet Excel file.,"`lmm_results`: List from run_lmm_analysis()., `output_file`: String. Output Excel file path., `include_model_objects`: Logical. Save model objects to RDS file., `top_genes_n`: Integer. Number of top genes to highlight.",Invisibly returns the output file path.
193,myR/R/,`myR/R/test_claude.R`,`generate_lmm_report`,Creates an HTML summary report with key visualizations and tables.,"`lmm_results`: List from run_lmm_analysis()., `seurat_obj`: Seurat object (needed for plotting)., `config`: List. Configuration object., `output_file`: String. Output HTML file path., `top_genes`: Integer. Number of top genes to visualize.",Invisibly returns the output file path.
194,myR/R/,`myR/R/test_claude.R`,`print.geomx_config`,Print method for geomx_config objects.,`config`: List from create_analysis_config().,Invisibly returns the config object.
195,myR/R/,`myR/R/test_claude.R`,`summarize_geomx_object`,Quick summary of Seurat object for GeoMx data.,"`seurat_obj`: Seurat object., `config`: List. Configuration object.",Invisibly returns the Seurat object.
196,myR/R/,`myR/R/test_claude.R`,`extract_gene_coefficients`,Convenience function to get detailed coefficient info for genes of interest.,"`lmm_results`: List from run_lmm_analysis()., `genes`: Character vector of gene names.",Data frame of coefficients for specified genes.
197,myR/R/,`myR/R/test_claude.R`,`compare_screening_vs_lmm`,Diagnostic function to see how well initial screening predicts LMM significance.,"`screening_results`: List from screen_genes()., `lmm_results`: List from run_lmm_analysis()., `term_pattern`: String. Which LMM terms to focus on.",Data frame comparing both methods.
198,myR/R/,`myR/R/test_claude.R`,`run_complete_analysis`,End-to-end analysis pipeline combining screening and LMM fitting.,"`seurat_obj`: Seurat object., `config`: List from create_analysis_config()., `screening_params`: List of parameters for screen_genes()., `lmm_params`: List of parameters for run_lmm_analysis()., `check_parity`: Logical. Run parity diagnostics first., `export_results`: Logical. Export results to Excel., `output_prefix`: String. Prefix for output files.","List with screening results, LMM results, and file paths."
199,myR/R/,`myR/R/demulti_utils.R`,`get_best_two`,This function takes a row of probability values and returns the indices of the two highest values.,`row`: A numeric vector of probability values.,A numeric vector of length 2 containing the indices of the two highest probability values.
200,myR/R/,`myR/R/demulti_utils.R`,`get_barcode_mapping`,This function processes demultiplexing data to create a mapping between barcodes and their most likely sample assignments.,`demux_data`: A data frame containing demultiplexing results.,A data frame containing barcode mapping information.
201,myR/R/,`myR/R/demulti_utils.R`,`is_doublet`,"This function checks if a sample name contains a '+' character, indicating it is a doublet.",`sample`: Character string containing the sample name.,"Logical value: TRUE if the sample is a doublet, FALSE otherwise."
202,myR/R/,`myR/R/demulti_utils.R`,`generate_sample_values`,This function generates a vector of sample values including both singlets and doublets.,"`start_num`: Integer specifying the starting sample number., `end_num`: Integer specifying the ending sample number.",A character vector containing all possible sample combinations.
203,myR/R/,`myR/R/demulti_utils.R`,`generate_sample_names`,This function generates a vector of sample names including both singlets and doublets.,`vector`: Character vector containing sample names.,A character vector containing all possible sample combinations.
204,myR/R/,`myR/R/utils.R`,`downsample_sobj`,This function randomly samples cells from a Seurat object to create a smaller subset.,"`sobj`: A Seurat object to be downsampled., `ratio`: Integer indicating the downsampling ratio (1:ratio). Default is 10., `seed`: Integer specifying the random seed for reproducibility. Default is 1234.",A downsampled Seurat object.
205,myR/R/,`myR/R/utils.R`,`printmy`,Prints marker genes in a comma-separated format.,"`markers`: Data frame with marker gene results., `sign`: Sign of logFC to print (""+"" or ""-"")., `num`: Number of genes to print (default: 100)., `pseudobulk`: Whether markers are from pseudobulk analysis.",Prints genes to the console.
206,myR/R/,`myR/R/utils.R`,`printMy`,Prints marker genes from a named list of marker data frames.,"`markers_list`: Named list of marker data frames., `...`: Additional arguments passed to `printmy()`.",Prints genes to the console.
207,myR/R/,`myR/R/utils.R`,`sort_samples`,"Sorts character sample identifiers, handling single-number and dual-number strings.",`samples`: Character vector of sample identifiers.,Sorted character vector of sample IDs.
208,myR/R/,`myR/R/utils.R`,`print_gene_combinations`,"For a list of gene sets, print genes that are unique to each combination.","`gene_list`: Named list of character vectors., `num_print`: Maximum number of genes to print per combination (default: 100).",Prints gene combinations to the console.
209,myR/R/,`myR/R/utils.R`,`sort_samples` (Second Definition),"Helper: Sort Sample Identifiers. Sorts character sample identifiers, handling single-number and dual-number strings (e.g., ""1+2"").",`samples`: Character vector of sample identifiers.,Sorted character vector of sample IDs.
