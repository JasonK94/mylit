% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pseudotime.R
\name{analyze_gene_dynamics_tradeSeq}
\alias{analyze_gene_dynamics_tradeSeq}
\title{Analyze gene expression dynamics using tradeSeq}
\usage{
analyze_gene_dynamics_tradeSeq(
  gene_id,
  sce_obj,
  condition_col,
  lineage_names = NULL,
  nknots = 6,
  test_to_perform = "patternTest",
  pseudotime_assay_name = "slingshot",
  weights_col_prefix = "slingWeight",
  output_dir = "tradeSeq_gene_plots",
  plot_split = FALSE,
  scale_DR = TRUE,
  fitGAM_args = list(),
  test_args = list()
)
}
\arguments{
\item{gene_id}{A character string, the ID of the gene to analyze.}

\item{sce_obj}{A SingleCellExperiment object, typically output from
\code{run_slingshot_from_seurat} or similarly prepared. It must contain:
\itemize{
\item counts in \code{assays(sce_obj)$counts}
\item Slingshot pseudotime matrix (cells x lineages) in \code{reducedDim(sce_obj, "slingshot")}
\item Slingshot cell weights matrix (cells x lineages) as DataFrame columns in \code{colData(sce_obj)}
(e.g., colData(sce_obj)$slingWeight1, colData(sce_obj)$slingWeight2, ...) or a matrix named 'slingshot_weights'.
}}

\item{condition_col}{A character string specifying the column name in \code{colData(sce_obj)}
that contains the condition factor (e.g., treatment group, patient prognosis).}

\item{lineage_names}{A character vector specifying which lineages to test (e.g., "Lineage1", "Lineage2").
If NULL (default), all lineages found in pseudotime matrix are considered if possible, or the first one.
It's often better to specify. \code{tradeSeq} functions like \code{patternTest} can accept multiple lineages.}

\item{nknots}{An integer, the number of knots for GAM splines in \code{fitGAM}.}

\item{test_to_perform}{A character string. Currently supports "patternTest".
Future versions could add "conditionTest", "diffEndTest", etc.}

\item{pseudotime_assay_name}{Character. Name of the reducedDim in SCE containing pseudotime. Default "slingshot".}

\item{weights_col_prefix}{Character. Prefix for colData columns containing cell weights. Default "slingWeight".
Alternatively, if \code{colData(sce_obj)$slingshot_weights} is a matrix, it will be used.}

\item{output_dir}{A character string specifying the directory to save plots.}

\item{plot_split}{Logical, if TRUE, plots for different conditions will be faceted. Default FALSE.}

\item{scale_DR}{Logical, if TRUE, Dynamic Range (DR) will be scaled by the mean
expression of the gene in the cells used for fitting for each lineage and condition.}

\item{fitGAM_args}{A list of additional arguments to pass to \code{tradeSeq::fitGAM}.}

\item{test_args}{A list of additional arguments to pass to the chosen test function (e.g., \code{patternTest}).}
}
\value{
A list containing:
\itemize{
\item \code{gene}: The input gene ID.
\item \code{status}: Character string, "success" or an error/skip message.
\item \code{metrics}: A list or tibble of calculated metrics (e.g., p-value from the test).
DR and TV might be added if prediction extraction is robustly implemented.
\item \code{plot_path}: Path to the saved plot file, if successful.
\item \code{plot_object}: The ggplot object itself.
}
}
\description{
Fits GAMs using the tradeSeq framework for a specific gene and performs tests
for differential progression or expression patterns along pseudotime trajectories.
}
\examples{
\dontrun{
# Assuming 'sce_sling' is an SCE object from run_slingshot_from_seurat
# and colData(sce_sling)$my_condition exists.
# Make sure lineage names in pseudotime matrix are "Lineage1", "Lineage2", etc.
# if (ncol(reducedDim(sce_sling, "slingshot")) > 0) {
#   lineage_to_test <- colnames(reducedDim(sce_sling, "slingshot"))[1]
#   tradeSeq_result <- analyze_gene_dynamics_tradeSeq(
#     gene_id = "GeneA", # Replace with an actual gene in your data
#     sce_obj = sce_sling,
#     condition_col = "my_condition",
#     lineage_names = lineage_to_test, # Test a specific lineage
#     nknots = 5,
#     output_dir = "tradeSeq_gene_plots"
#   )
#   if (!is.null(tradeSeq_result$plot_object)) print(tradeSeq_result$plot_object)
# }
}
}
