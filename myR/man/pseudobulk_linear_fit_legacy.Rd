% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/legacy.R
\name{pseudobulk_linear_fit_legacy}
\alias{pseudobulk_linear_fit_legacy}
\title{유전자 발현 데이터에 대한 선형 회귀 분석 수행}
\usage{
pseudobulk_linear_fit_legacy(
  sobj,
  genes,
  sample_col = "sample",
  numeric_predictor = "severity_score"
)
}
\arguments{
\item{sobj}{Seurat 객체.}

\item{genes}{분석할 유전자 이름의 문자형 벡터.}

\item{sample_col}{샘플 또는 그룹을 식별하는 메타데이터 열 이름을 지정하는 문자열입니다.
기본값은 "sample"입니다.}

\item{numeric_predictor}{선형 모델에서 예측 변수(독립 변수)로 사용될 수치형
결과 변수에 대한 메타데이터 열 이름을 지정하는 문자열입니다.
기본값은 "severity_score"입니다. 이 변수는 모델에서 Y ~ X 일 때 X 역할을 합니다.}
}
\value{
각 유전자에 대한 선형 모델 결과(절편, 기울기, p-값, R-제곱)를 포함하는 데이터 프레임.
각 모델은 \code{gene_expression ~ numeric_predictor} 형태로 적합됩니다.
}
\description{
이 함수는 Seurat 객체, 유전자 목록, 샘플 그룹을 지정하는 메타데이터 열,
그리고 수치형 결과 변수에 대한 메TA데이터 열을 입력으로 받습니다.
각 샘플 그룹별로 각 유전자의 평균 발현량을 계산하고, 이를 결과 변수와 병합한 후
각 유전자에 대해 결과 변수를 예측 변수로 하는 단순 선형 회귀를 수행합니다.
}
\examples{
\dontrun{
# 예제 Seurat 객체 (pbmc_small) 및 데이터 생성
if (requireNamespace("SeuratData", quietly = TRUE) &&
    requireNamespace("Seurat", quietly = TRUE)) {
  suppressWarnings(SeuratData::InstallData("pbmc3k"))
  data("pbmc3k.final")
  sobj <- pbmc3k.final

  # 임의의 'sample' 및 'severity_score' 메타데이터 추가
  set.seed(123)
  n_cells <- ncol(sobj)
  # 각 세포에 고유한 샘플 ID 부여 (실제로는 세포보다 샘플 수가 적을 것)
  # 이 예제에서는 각 세포가 고유한 '샘플'이라고 가정하여 그룹화의 의미를 보여줌
  # 실제 사용 시에는 환자 ID 또는 실험 배치 ID 등이 될 것임
  # 여기서는 설명을 위해 10개의 가상 샘플을 만듦
  sample_ids <- factor(paste0("sample_", rep(1:10, length.out = n_cells)))
  sobj$sample <- sample_ids

  # 각 '샘플'에 대한 severity_score 생성 (샘플별로 하나의 값을 가져야 함)
  unique_samples <- unique(sobj$sample)
  severity_scores <- runif(length(unique_samples), 1, 10)
  names(severity_scores) <- unique_samples
  sobj$severity_score <- severity_scores[sobj$sample]

  # 분석할 유전자 선택 (예: 상위 2개 변동 유전자)
  sobj <- FindVariableFeatures(sobj, verbose = FALSE)
  genes_to_analyze <- head(VariableFeatures(sobj), 2)

  # 함수 실행
  results <- pseudobulk_linear_fit(sobj,
                                 genes = genes_to_analyze,
                                 sample_col = "sample",
                                 numeric_predictor = "severity_score")
  print(results)
}
}
}
